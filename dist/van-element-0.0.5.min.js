var i = Object.defineProperty;
var b = (a, e, t) => e in a ? i(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t;
var h = (a, e, t) => (b(a, typeof e != "symbol" ? e + "" : e, t), t);
import l from "vanjs-core";
function m(a, e, t) {
  var d;
  window.customElements.define(
    a,
    (d = class extends HTMLElement {
      constructor() {
        super();
        h(this, "attrs", {});
      }
      connectedCallback() {
        for (let r of this.attributes)
          this.attrs[r.name] = l.state(r.value);
        let s;
        l.add(
          t != null && t.disableShadow ? this : this.attachShadow({ mode: "open" }),
          e({
            ...this.attrs,
            onMount: (r) => s = r,
            element: this
          })
        ), s == null || s(this);
      }
      attributeChangedCallback(s, r, c) {
        this.attrs[s] && (this.attrs[s].val = c);
      }
    }, h(d, "observedAttributes", (t == null ? void 0 : t.observed) ?? []), d)
  );
}
export {
  m as define
};
